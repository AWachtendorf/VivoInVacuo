@startuml
namespace animation {
    class Animation << (S,Aquamarine) >> {
        - startedAt time.Duration
        - duration time.Duration
        - interpolator Interpolator
        - state animatorState

        + Start() 
        + Apply(elapsed float64) bool
        + Finished() bool

    }
    interface FloatAnimation  {
        + Start() 
        + Apply(elapsed float64) bool
        + Min() float64
        + Max() float64
        + Current() float64
        + Finished() bool

    }
    class animation.Interpolator << (T, #FF7700) >>  {
    }
    class animation.animatorState << (T, #FF7700) >>  {
    }
    class linearFloatAnimation << (S,Aquamarine) >> {
        - min float64

        + Min() float64
        + Max() float64
        + Current() float64

    }
}
"animation.Animation" *-- "extends""animation.linearFloatAnimation"


namespace area {
    class Area << (S,Aquamarine) >> {
        - imgOpts *ebiten.DrawImageOptions
        - offset Vec2d
        - scale float64
        - coordinates Vec2d
        - thrust float64
        - maxThrust float64
        - accelerated bool
        - otherForce Vec2d

        + Width float64
        + Position Vec2d
        + SShip *objects.Ship

        + ShowPositiononPane() Vec2d
        + Applyforce(force Vec2d) 
        + Draw(screen *ebiten.Image) 
        + Update() error
        + Status() bool
        + UpdatePosition() 

    }
}

"game.Readupdate" <|-- "implements""area.Area"
"game.Renderable" <|-- "implements""area.Area"

namespace background {
    class BackGround << (S,Aquamarine) >> {
        - posX float64
        - thrust float64
        - maxThrust float64
        - scale float64
        - position Vec2d
        - accelerated bool
        - otherForce Vec2d

        + Sship *objects.Ship
        + EbitenImage *ebiten.Image
        + ImageOptions *ebiten.DrawImageOptions

        + BoundingBox() Rect
        + Position() Vec2d
        + Width() float64
        + Height() float64
        + Energy() float64
        + Mass() float64
        + Status() bool
        + Draw(screen *ebiten.Image) 
        + LoopBackGround() 
        + Update() error
        + ConvertInputToAcceleration() 

    }
}

"game.Readupdate" <|-- "implements""background.BackGround"
"game.Renderable" <|-- "implements""background.BackGround"

namespace game {
    class Game << (S,Aquamarine) >> {
        - met *MeteoPart

        + Img *objects.Ship
        + BG []*background.BackGround
        + Renderables []Renderable
        + Readupdate []Readupdate
        + Objects []Object
        + MiniMap *graphics.Minimap
        + Ship *objects.Ship
        + Scale float64

        - applyCollisions() 
        - applyTorpedos() 

        + Update() error
        + Draw(screen *ebiten.Image) 
        + Layout(outsideWidth int, outsideHeight int) (int, int)
        + CreateNewRandomMeteoride() 
        + Setup() 

    }
    interface Object  {
        + BoundingBox() Rect
        + Energy() float64
        + Position() Vec2d
        + Applyforce(force Vec2d) 
        + Mass() float64
        + React() 

    }
    interface Readupdate  {
        + Update() error

    }
    interface Renderable  {
        + Draw(screen *ebiten.Image) 

    }
}

"game.Readupdate" <|-- "implements""game.Game"
"game.Renderable" <|-- "implements""game.Game"

namespace graphics {
    class Minimap << (S,Aquamarine) >> {
        - img *ebiten.Image
        - imgOpts *ebiten.DrawImageOptions
        - img1 *ebiten.Image
        - img1Opts *ebiten.DrawImageOptions
        - posX float64
        - gamePane *area.Area
        - position Vec2d
        - width float64
        - sippixel *ebiten.Image
        - sipomgopts *ebiten.DrawImageOptions

        + Squares []*objects.Squares
        + Meteos []*MeteoPart
        + Pixel []Pixels

        + Draw(screen *ebiten.Image) 
        + DrawPixels(screen *ebiten.Image) 
        + Update() error
        + Status() bool

    }
    interface Pixels  {
        + DrawOnMap(screen *ebiten.Image, mapposX float64, mapwidth float64, mapheight float64, gameareawidth float64, gameareheight float64) 

    }
}

"game.Readupdate" <|-- "implements""graphics.Minimap"
"game.Renderable" <|-- "implements""graphics.Minimap"

namespace mathsandhelper {
    class Rect << (S,Aquamarine) >> {
        + Left float64

        + Width() float64
        + Height() float64
        + Intersects(g Rect) bool

    }
    class Time << (S,Aquamarine) >> {
        + Elapsed float64

        + Duration() float64
        + Update() error
        + Status() bool

    }
    class Vec2d << (S,Aquamarine) >> {
        + X float64

        + Add(o Vec2d) Vec2d
        + Sub(o Vec2d) Vec2d
        + Scale(x float64, y float64) Vec2d
        + Div(x float64, y float64) Vec2d
        + Abs() Vec2d
        + Norm() Vec2d
        + Neg() Vec2d
        + Length() float64

    }
}

"game.Readupdate" <|-- "implements""mathsandhelper.Time"

namespace meteoride {
    class MeteoPart << (S,Aquamarine) >> {
        - img *ebiten.Image
        - imgOpts *ebiten.DrawImageOptions
        - difference float64
        - alive bool
        - color0 fcolor
        - explodeRotation FloatAnimation
        - explodeAlpha FloatAnimation

        + PointX float64
        + MapPosX float64
        + PosXY Vec2d
        + Rotation float64
        + Pix *ebiten.Image
        + PixOpts *ebiten.DrawImageOptions
        + OtherForce Vec2d

        + BoundingBox() Rect
        + Width() float64
        + Height() float64
        + Position() Vec2d
        + Mass() float64
        + Energy() float64
        + Applyforce(force Vec2d) 
        + React() 
        + Status() bool
        + Update() error
        + Draw(screen *ebiten.Image) 
        + DrawMaeteo(screen *ebiten.Image, rot float64, color fcolor) 
        + DecayAccelerationOverTime() 
        + DrawOnMap(screen *ebiten.Image, mapposX float64, mapwidth float64, mapheight float64, gameareawidth float64, gameareheight float64) 

    }
    class Meteoride << (S,Aquamarine) >> {
        - img *ebiten.Image
        - imgOpts *ebiten.DrawImageOptions
        - position Vec2d
        - exploded bool
        - width float64
        - mass float64
        - objectType string

        + PointX float64
        + Met []*MeteoPart
        + OtherForce Vec2d

        + Explode() 
        + BoundingBox() Rect
        + Width() float64
        + Height() float64
        + Position() Vec2d
        + Mass() float64
        + Applyforce(force Vec2d) 
        + Energy() float64
        + React() 
        + Status() bool
        + Update() error
        + UpdatePosition() 
        + MovementMeteo() 
        + Draw(screen *ebiten.Image) 
        + DecayAccelerationOverTime() 

    }
    class fcolor << (S,Aquamarine) >> {
        - r float64

        + SetAlpha(a float64) fcolor

    }
}

"game.Readupdate" <|-- "implements""meteoride.MeteoPart"
"game.Renderable" <|-- "implements""meteoride.MeteoPart"
"graphics.Pixels" <|-- "implements""meteoride.MeteoPart"
"game.Readupdate" <|-- "implements""meteoride.Meteoride"
"game.Renderable" <|-- "implements""meteoride.Meteoride"

namespace objects {
    class Particle << (S,Aquamarine) >> {
        - partImg *ebiten.Image
        - partImgOpts *ebiten.DrawImageOptions
        - scale float64
        - position Vec2d
        - direction Vec2d
        - lifetime time.Duration
        - starttime time.Duration
        - current time.Duration
        - speed float64
        - available bool
        - particlealpha FloatAnimation
        - particlelife FloatAnimation

        - drawPart(screen *ebiten.Image, speed float64) 

        + OnDraw(screen *ebiten.Image) 
        + IsAvailable() bool
        + CheckState() bool
        + Start(angle float64, startPos Vec2d, speed float64) 

    }
    class Ship << (S,Aquamarine) >> {
        - posX float64
        - thrust float64
        - position Vec2d
        - mass float64
        - rotated bool
        - torpedos []*Torpedo
        - particles []*Particle
        - exploding bool
        - explodeRotation FloatAnimation
        - explodeAlpha FloatAnimation
        - explodeScale FloatAnimation

        + EbitenImage *ebiten.Image
        + ImgOpts *ebiten.DrawImageOptions
        + RotationDegree float64
        + RotationThrust float64
        + Scale float64
        + OtherForce Vec2d

        - fireTorpedo() 

        + Draw(screen *ebiten.Image) 
        + BoundingBox() Rect
        + Torpedos() []*Torpedo
        + Position() Vec2d
        + Image() *ebiten.Image
        + Options() *ebiten.DrawImageOptions
        + Width() float64
        + Height() float64
        + Energy() float64
        + Mass() float64
        + Applyforce(force Vec2d) 
        + React() 
        + Status() bool
        + UpdateShipImage(screen *ebiten.Image, rotationRadiant float64) 
        + ApplyParticles() 
        + ConvertInputToRotation() float64
        + Update() error
        + DecayAccelerationOverTime() 

    }
    class Squares << (S,Aquamarine) >> {
        - width float64
        - thrust float64
        - rotation float64
        - rotated bool
        - position Vec2d
        - objectType string

        + Img *ebiten.Image
        + ImgOpts *ebiten.DrawImageOptions
        + Pix *ebiten.Image
        + PixOpts *ebiten.DrawImageOptions
        + OtherForce Vec2d

        + BoundingBox() Rect
        + UpdateSquares() 
        + Update() error
        + Draw(screen *ebiten.Image) 
        + Width() float64
        + Height() float64
        + Position() Vec2d
        + Energy() float64
        + Mass() float64
        + React() 
        + Applyforce(force Vec2d) 
        + Status() bool
        + DrawOnMap(screen *ebiten.Image, mapposX float64, mapwidth float64, mapheight float64, gameareawidth float64, gameareheight float64) 
        + DecayAccelerationOverTime() 

    }
    class Torpedo << (S,Aquamarine) >> {
        - img *ebiten.Image
        - imgOpts *ebiten.DrawImageOptions
        - imgWidth float64
        - scale float64
        - position Vec2d
        - dir Vec2d
        - aniLayer0Degree float64
        - aniLayer1Degree float64
        - color0 fcolor
        - color1 fcolor
        - state TorpedoLifeState
        - explodingAlpha FloatAnimation
        - explodingScale FloatAnimation
        - lifetime FloatAnimation
        - lifetimeDuration time.Duration

        + Damage float64

        - drawImg(screen *ebiten.Image, rot float64, scale float64, color fcolor) 

        + IsAvailable() bool
        + IsActive() bool
        + Explode() 
        + Reset() 
        + Fire(startPos Vec2d, rotDegree float64) 
        + Width() float64
        + Height() float64
        + BoundingBox() Rect
        + Position() Vec2d
        + Hits(state bool) bool
        + OnDraw(screen *ebiten.Image) 

    }
    class fcolor << (S,Aquamarine) >> {
        - r float64

        + SetAlpha(a float64) fcolor

    }
    class objects.TorpedoLifeState << (T, #FF7700) >>  {
    }
}

"game.Readupdate" <|-- "implements""objects.Ship"
"game.Renderable" <|-- "implements""objects.Ship"
"game.Readupdate" <|-- "implements""objects.Squares"
"game.Renderable" <|-- "implements""objects.Squares"
"graphics.Pixels" <|-- "implements""objects.Squares"

"__builtin__.int" #.. "alias of""animation.animatorState"
"__builtin__.int" #.. "alias of""objects.TorpedoLifeState"
"animation.<font color=blue>func</font>(float64) " #.. "alias of""animation.Interpolator"
@enduml
